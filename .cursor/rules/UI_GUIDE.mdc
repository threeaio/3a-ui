---
description: UI GUIDE
globs: 
alwaysApply: true
---

# Structure of this project 

# 3A-UI Implementation Guide

## Table of Contents

- [Introduction](mdc:#introduction)
- [Component Architecture](mdc:#component-architecture)
- [Form Implementation](mdc:#form-implementation)
- [Layout Patterns](mdc:#layout-patterns)
- [UI Composition Patterns](mdc:#ui-composition-patterns)
- [Responsive Design](mdc:#responsive-design)
- [Accessibility Considerations](mdc:#accessibility-considerations)
- [Best Practices](mdc:#best-practices)

## Introduction

This guide provides practical implementation details for building UIs with the 3A-UI design system. It focuses on component architecture, form patterns, layout strategies, and composition techniques to create consistent, accessible, and maintainable interfaces.

While the [Design Guide](mdc:DESIGN_GUIDE.md) covers the visual aspects and design tokens, this guide focuses on the implementation details and code patterns.

## Component Architecture

### Component Structure

The 3A-UI system follows a modular component architecture with clear separation of concerns:

1. **Base Components**: Foundational UI elements like buttons, inputs, and badges
2. **Compound Components**: Combinations of base components like input groups and button groups
3. **Layout Components**: Structural elements that organize content like sections and cards
4. **Page Components**: Full page layouts that combine multiple components

### Component Props Pattern

Components follow a consistent props pattern:

```jsx
// Base component with variant, size, and optional props
function Button({ className, variant = 'default', size = 'default', asChild = false, ...props }) {
  // Implementation
}

// Compound component with composition
function InputGroup({ children, error, className, ...props }) {
  // Implementation
}
```

### Component Composition

Components are designed to be composable, allowing for flexible UI construction:

```jsx
// Button group composition
<ButtonGroup variant="outline">
  <Button>Action</Button>
  <Button>Settings</Button>
</ButtonGroup>

// Form element composition
<div className="space-y-2">
  <Label htmlFor="email">Email</Label>
  <Input id="email" type="email" />
</div>
```

## Form Implementation

### Form Element Structure

Form elements follow a consistent structure:

1. **Label**: Describes the input purpose
2. **Input/Control**: The interactive element
3. **Helper/Error Text**: Additional information or error messages

```jsx
<div className="flex flex-col gap-2">
  <Label htmlFor="email">Email</Label>
  <Input id="email" type="email" placeholder="your@email.com" />
  {error && <p className="text-sm text-destructive">{error}</p>}
</div>
```

### Input Variants

The Input component supports several variants:

1. **Standard Input**: Basic text input
2. **Input with Icon**: Input with leading icon
3. **Clearable Input**: Input with clear button
4. **Input with Icon and Clear**: Combined functionality
5. **Password Input**: Toggle visibility functionality

```jsx
// Input with icon
<Input placeholder="Search..." icon={<Search className="h-4 w-4" />} />

// Clearable input
<Input placeholder="Type to see clear button..." clearable />

// Input with icon and clear
<Input
  placeholder="Search with clear..."
  icon={<Search className="h-4 w-4" />}
  clearable
/>

// Password input with toggle
<PasswordInput placeholder="Enter password" />
```

### Form Layouts

Forms can be organized in different layouts:

1. **Stacked Form**: Vertical arrangement of form groups
2. **Single Row Form**: Horizontal arrangement for compact forms
3. **Input Groups**: Combined inputs that function as a unit

```jsx
// Stacked form
<form className="space-y-5">
  {/* Form groups */}
</form>

// Single row form
<form className="flex items-center gap-2">
  {/* Form elements */}
</form>

// Input group
<InputGroup>
  <Input type="number" className="w-40" />
  <Select>
    <SelectTrigger>
      <SelectValue placeholder="Unit" />
    </SelectTrigger>
    <SelectContent>
      {/* Options */}
    </SelectContent>
  </Select>
</InputGroup>
```

### Form States

Form elements support various states:

1. **Default**: Normal interactive state
2. **Focus**: When the element has focus
3. **Error**: When validation fails
4. **Disabled**: When interaction is not allowed

```jsx
// Error state
<Input aria-invalid="true" className="border-destructive" />
<p className="text-sm text-destructive">Error message</p>

// Disabled state
<Input disabled />
<Textarea disabled />
<Select disabled />
```

## Layout Patterns

### Row System

The Row System provides consistent vertical rhythm using predefined height classes:

```jsx
// Compact row (h-13) This has an arbitrary value because its only purpose is to minimally wrap a row of standard UI-Components (Butten-Group, Form-Groups, Single Elements)
<div className={`h-13 px-2 flex items-center`}>
  {/* Content */}
</div>

// Standard row (h-20)
<div className={`h-20 px-5 flex items-center`}>
  {/* Content */}
</div>

// Double-height row (h-40)
<div className={`h-40 p-10 flex flex-col justify-center`}>
  <h2 className="font-semibold">Heading</h2>
  <p className="text-muted-foreground">Content</p>
</div>
```

### Section Structure

Sections follow a consistent structure with title, optional subline, and content:

```jsx
<section>
  <div className="px-10 h-40 flex flex-col justify-center">
    <h2 className="font-semibold">{title}</h2>
    {subline && <p className="mt-1 text-muted-foreground">{subline}</p>}
  </div>
  <div className="border-t p-10 mb-5">{children}</div>
</section>
```

### Card Patterns

Cards are used to group related content with consistent padding and styling:

```jsx
// Basic card
<div className="bg-card text-card-foreground p-5 rounded-lg border border-border">
  <h3 className="font-semibold mb-2.5">Card Title</h3>
  <p className="text-muted-foreground">Card content</p>
</div>

// Content card with more spacing
<div className="border rounded-xl bg-background">
  <div className="p-10">
    <div className="flex flex-col gap-2.5 max-w-2xl">
      <h2 className="font-semibold">Content Section</h2>
      <p className="text-muted-foreground">Content text goes here.</p>
    </div>
  </div>
</div>
```

## UI Composition Patterns

### Action Bars

Action bars provide consistent layout for interactive controls:

```jsx
<div className="h-20 px-5 flex items-center justify-between">
  <div className="flex items-center gap-5">
    <ButtonGroup variant="outline">
      <Button>Action</Button>
      <Button>Settings</Button>
    </ButtonGroup>
    <span className="text-muted-foreground text-xs">|</span>
    <Badge>Status</Badge>
  </div>

  <ButtonGroup variant="outline">
    <Button size="icon">
      <Plus />
    </Button>
  </ButtonGroup>
</div>
```

### Search and Filter Patterns

Search and filter interfaces follow consistent patterns:

```jsx
// Simple search
<div className="flex gap-2">
  <Input placeholder="Search..." icon={<Search />} clearable />
  <Button>Search</Button>
</div>

// Advanced filter
<form className="flex items-center gap-2">
  <Label htmlFor="category" className="whitespace-nowrap">
    Category:
  </Label>
  <Select defaultValue="all">
    <SelectTrigger>
      <SelectValue placeholder="Category" />
    </SelectTrigger>
    <SelectContent>
      <SelectItem value="all">All Categories</SelectItem>
      {/* Other options */}
    </SelectContent>
  </Select>
  <Input placeholder="Search..." icon={<Search />} clearable />
  <Button type="submit">Apply</Button>
</form>
```

### Content with Explanations

Explanatory content follows a consistent pattern:

```jsx
<div>
  <p className="text-muted-foreground max-w-2xl leading-tight mb-5">
    Main explanation text with <span className="text-foreground">emphasized parts</span>.
  </p>
  <ul className="list-disc pl-5 text-muted-foreground max-w-2xl leading-tight mb-5 space-y-2">
    <li>
      <span className="text-foreground font-medium">Feature:</span> Description
    </li>
    {/* More list items */}
  </ul>
</div>
```

## Responsive Design

### Mobile-First Approach

The UI system uses a mobile-first approach with responsive adjustments:

```jsx
// Responsive layout
<div className="flex flex-col md:flex-row gap-2.5 md:gap-5">
  {/* Content */}
</div>

// Responsive text
<p className="text-base md:text-sm">
  This text adjusts size on different screens.
</p>

// Responsive spacing
<div className="p-2.5 md:p-5 lg:p-10">
  {/* Content with responsive padding */}
</div>
```

### Responsive Patterns

Common responsive patterns include:

1. **Stack to Row**: Elements stack vertically on mobile and arrange horizontally on larger screens
2. **Simplified to Complex**: UI simplifies on mobile and shows more options on larger screens
3. **Adjusted Spacing**: Spacing increases on larger screens for better visual hierarchy

```jsx
// Stack to row
<div className="flex flex-col md:flex-row gap-2.5">
  <div className="w-full md:w-1/3">Sidebar</div>
  <div className="w-full md:w-2/3">Main content</div>
</div>

// Simplified to complex
<div className="md:hidden">
  <Button size="icon">
    <Menu />
  </Button>
</div>
<nav className="hidden md:block">
  {/* Full navigation */}
</nav>
```

## Accessibility Considerations

### Form Accessibility

Forms implement accessibility best practices:

1. **Labels**: All inputs have associated labels
2. **Error States**: Error messages are properly associated with inputs
3. **Focus Management**: Focus states are clearly visible
4. **Keyboard Navigation**: All interactive elements are keyboard accessible

```jsx
// Accessible form element
<div className="space-y-2">
  <Label htmlFor="email">Email</Label>
  <Input id="email" type="email" aria-invalid={!!error} aria-describedby={error ? 'email-error' : undefined} />
  {error && (
    <p id="email-error" className="text-sm text-destructive">
      {error}
    </p>
  )}
</div>
```

### Interactive Element Accessibility

Interactive elements follow accessibility best practices:

1. **Button Types**: Buttons have appropriate types (button, submit)
2. **Icon Buttons**: Icon-only buttons have accessible labels
3. **Focus Management**: Focus states are clearly visible

```jsx
// Accessible icon button
<Button
  size="icon"
  aria-label="Add item"
>
  <Plus />
</Button>

// Accessible toggle
<Button
  aria-pressed={isActive}
  onClick={() => setIsActive(!isActive)}
>
  {isActive ? "Active" : "Inactive"}
</Button>
```

## Best Practices

### Component Implementation

1. **Use composition over configuration** - Build complex UIs by composing simple components
2. **Keep components focused** - Each component should have a single responsibility
3. **Implement consistent props patterns** - Use consistent prop names and defaults
4. **Provide sensible defaults** - Components should work well with minimal configuration

### Form Implementation

1. **Group related inputs** - Use logical grouping for form elements
2. **Implement consistent validation** - Use consistent error patterns
3. **Provide clear feedback** - Users should understand the state of the form
4. **Optimize for keyboard use** - Forms should be fully keyboard accessible

### Layout Implementation

1. **Follow the Row System** - Use the predefined height classes for consistent vertical rhythm
2. **Use consistent spacing** - Apply the spacing system consistently
3. **Implement responsive patterns** - Design for mobile first, then enhance for larger screens
4. **Maintain content width constraints** - Use `max-w-2xl` for readable text content

### Performance Considerations

1. **Minimize re-renders** - Use memoization for expensive components
2. **Lazy load when appropriate** - Load components only when needed
3. **Optimize bundle size** - Import only what you need from component libraries
4. **Consider server components** - Use React Server Components where appropriate

---

This guide is a living document and will be updated as the UI system evolves.

